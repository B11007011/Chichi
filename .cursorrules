# Scratchpad

## Current Task: WordPress Headless CMS Integration (Posts & Content Management)

### Implementation Plan:
1. [ ] WordPress Backend Setup:
   - Basic WordPress installation
   - Essential plugins:
     - WPGraphQL (for better API queries)
     - JWT Authentication (for secure API access)
     - ACF (for custom fields)
     - WPML (for multilingual content)

2. [ ] Content Types Setup:
   - Blog posts
   - Course content
   - Teacher profiles
   - Testimonials
   - Career opportunities

3. [ ] API Integration:
   - WordPress REST API endpoints
   - Authentication setup
   - Custom endpoints if needed
   - Media handling

4. [ ] Next.js Integration:
   - API utility functions
   - Content fetching
   - Post management
   - Media management

### API Structure:

1. Content Endpoints:
```typescript
// Types for WordPress API
interface Post {
  id: number;
  title: {
    rendered: string;
  };
  content: {
    rendered: string;
  };
  excerpt: {
    rendered: string;
  };
  slug: string;
  date: string;
  modified: string;
  featured_media: number;
  categories: number[];
  tags: number[];
  language: string;
}

// API Routes
const WP_API = {
  posts: '/wp/v2/posts',
  pages: '/wp/v2/pages',
  media: '/wp/v2/media',
  categories: '/wp/v2/categories',
  tags: '/wp/v2/tags'
};
```

2. Required Environment Variables:
```env
WORDPRESS_API_URL=your_wordpress_site/wp-json
WORDPRESS_AUTH_TOKEN=your_jwt_token
```

### Next.js Integration:

1. API Utilities:
```typescript
// lib/wordpress-api.ts
export async function getPosts(locale: string) {
  const res = await fetch(`${process.env.WORDPRESS_API_URL}/wp/v2/posts?lang=${locale}`);
  return res.json();
}

export async function getPost(slug: string, locale: string) {
  const res = await fetch(`${process.env.WORDPRESS_API_URL}/wp/v2/posts?slug=${slug}&lang=${locale}`);
  const posts = await res.json();
  return posts[0];
}

export async function getCategories(locale: string) {
  const res = await fetch(`${process.env.WORDPRESS_API_URL}/wp/v2/categories?lang=${locale}`);
  return res.json();
}
```

2. Content Components:
```typescript
// components/PostList.tsx
interface PostListProps {
  posts: Post[];
}

export function PostList({ posts }: PostListProps) {
  return (
    <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
      {posts.map((post) => (
        <PostCard key={post.id} post={post} />
      ))}
    </div>
  );
}
```

### Features to Implement:

1. [ ] Content Management:
   - Post creation/editing
   - Media upload
   - Categories and tags
   - Custom fields

2. [ ] Multilingual Support:
   - Content translation
   - Language switching
   - URL structure
   - SEO metadata

3. [ ] Authentication:
   - JWT token handling
   - API security
   - User roles

4. [ ] Media Handling:
   - Image optimization
   - Media library
   - Responsive images

### Next Steps:
1. [ ] Set up WordPress installation
2. [ ] Configure essential plugins
3. [ ] Create API utility functions
4. [ ] Implement content components
5. [ ] Set up authentication
6. [ ] Test API integration

### Required Environment Variables:
```env
WORDPRESS_API_URL=your_wordpress_site/wp-json
WORDPRESS_AUTH_TOKEN=your_jwt_token
```

### Content Structure in WordPress:
1. Content Types:
   - Articles
   - Categories
   - Authors
   - Tags
   - Media
   - SEO Components
   - Custom Components

2. Components:
   - Rich Text
   - SEO Metadata
   - Media Gallery
   - Author Info
   - Social Links

3. Internationalization:
   - Vietnamese (vi)
   - English (en)
   - Traditional Chinese (zh-Hant)
   - Simplified Chinese (zh-Hans)

### Features to Implement:
1. [ ] Content Management:
   - Rich text editor
   - Media management
   - Version control
   - Draft system
   - Publishing workflow

2. [ ] API Integration:
   - REST API endpoints
   - GraphQL schema
   - Authentication
   - Rate limiting
   - Caching

3. [ ] User Management:
   - Role-based access
   - API tokens
   - User profiles
   - Authentication

4. [ ] Multilingual:
   - Content localization
   - URL structure
   - Language switcher
   - SEO per language

### Development Steps:
1. [ ] WordPress Setup:
   - Download WordPress
   - Create MySQL database
   - Run installation wizard
   - Configure basic settings

2. [ ] Plugin Setup:
   - Install WPGraphQL
   - Configure language pairs
   - Set up SEO plugins
   - Configure caching
   - Set up security measures

3. [ ] Content Organization:
   - Create main categories
   - Set up tags structure
   - Configure media library
   - Set up author profiles

4. [ ] Security & Performance:
   - Configure Wordfence
   - Set up caching
   - Configure backups
   - Optimize media

### Monitoring & Analytics:
1. Key Metrics:
   - Page views per language
   - Member signups
   - Newsletter subscriptions
   - Content engagement
   - Performance metrics

2. Tools:
   - WordPress analytics
   - Search Console
   - Performance monitoring

### WordPress Blog Requirements:
1. Required Plugins:
   - WPML (for multilingual support)
   - Yoast SEO (for multilingual SEO)
   - WP Super Cache (for performance)
   - Google Analytics for WordPress
   - Wordfence Security (security)
   - BackupBuddy (backups)

2. Content Structure:
   - Blog posts
   - Categories
   - Tags
   - Media library
   - Author profiles

3. Features:
   - Multi-language content
   - SEO optimization
   - Social media sharing
   - Comments management
   - Media management
   - Analytics tracking

### Next Steps:
1. [ ] Install WordPress on hosting
2. [ ] Install and configure required plugins
3. [ ] Set up multilingual support
4. [ ] Configure SEO settings
5. [ ] Create content categories and structure
6. [ ] Set up user roles and permissions
7. [ ] Configure backup and security

### WordPress Setup Instructions:
1. Installation:
   - Download WordPress
   - Create MySQL database
   - Run installation wizard
   - Configure basic settings

2. Plugin Setup:
   - Install WPML
   - Configure language pairs
   - Set up SEO plugins
   - Configure caching
   - Set up security measures

3. Content Organization:
   - Create main categories
   - Set up tags structure
   - Configure media library
   - Set up author profiles

4. Security & Performance:
   - Configure Wordfence
   - Set up caching
   - Configure backups
   - Optimize media

### Progress Update (2024-02-27):
[X] Set up WordPress integration foundation:
    - Created WordPress API utilities
    - Defined TypeScript types for data models
    - Configured WordPress settings
    - Updated Next.js configuration for WordPress and i18n

### Required WordPress Setup:
1. Install and configure WordPress with following plugins:
   - WPGraphQL
   - Advanced Custom Fields (ACF)
   - ACF to REST API
   - WP REST API Menus
   - JWT Authentication
   - WPML (for multilingual support)

2. Create custom post types:
   - Courses
   - Lessons
   - Teachers
   - Testimonials
   - Careers

3. Configure CORS and authentication settings

### Requirements Analysis

#### User Features:
[X] Main landing page
[ ] Subpages:
    - Teacher team introduction
    - Course information
    - Career opportunities
    - Legal information
    - Client testimonials
[ ] Gmail account registration
[ ] Student email list management
[ ] Multi-language support (Vietnamese, English, Traditional Chinese, Simplified Chinese)
[ ] User-friendly interface

#### Admin Features (Client):
[ ] WordPress CMS Integration:
    - Course management
    - Lesson management
    - Exercise management
    - Post management
[ ] Content Management Features:
    - Image support
    - Content editing
    - Hashtags
    - Embedded links (YouTube, Meta, TikTok)
[ ] Google Drive integration for document management
[ ] Analytics:
    - Post view statistics
    - Document download tracking
    - Weekly/Monthly/Yearly reports
[ ] Google Forms integration

#### Developer Requirements:
[ ] SEO Optimization:
    - Vietnamese keywords
    - Chinese keywords
[ ] Performance monitoring:
    - Server load monitoring
    - Website storage usage
[ ] Infrastructure:
    - Support for 10,000 visits/month
    - Content storage under 5GB
[ ] System maintainability
[ ] Blog/News section with WordPress CMS

### Implementation Priority:

1. Foundation Setup:
   [ ] Next.js + WordPress Headless CMS Architecture
   [ ] Database Design
   [ ] Authentication System
   [ ] Multi-language Support Framework

2. Core Features:
   [ ] Landing Page and Basic Pages
   [ ] WordPress CMS Integration
   [ ] Content Management System
   [ ] User Registration/Management

3. Integration Features:
   [ ] Google Services Integration
   [ ] Analytics Implementation
   [ ] Document Management System

4. Enhancement:
   [ ] SEO Implementation
   [ ] Performance Optimization
   [ ] Monitoring Setup

### Technical Stack:

1. Frontend:
   - Next.js
   - Tailwind CSS
   - i18n for translations
   - WordPress REST API integration

2. Backend:
   - WordPress as Headless CMS
   - Custom Next.js API routes
   - MySQL (WordPress database)

3. Infrastructure:
   - Vercel/Similar for Next.js hosting
   - WordPress hosting
   - Google Cloud Storage for media

4. Monitoring:
   - Google Analytics
   - Server monitoring tools
   - WordPress analytics

## Current Task: Project Improvement Plan

### Priority Areas for Improvement:
[ ] Authentication & Authorization
[ ] Backend & API Structure
[ ] Database Integration
[ ] State Management
[ ] Testing Infrastructure
[ ] Performance Optimization
[ ] Security Measures
[ ] Monitoring & Logging
[ ] Development Experience
[ ] Project Structure
[ ] Internationalization
[ ] Environment & Configuration
[ ] CI/CD Pipeline
[ ] Documentation
[ ] Accessibility
[ ] Error Handling

### Next Steps:
1. Prioritize improvements based on user feedback
2. Create detailed implementation plan for chosen areas
3. Implement improvements incrementally
4. Test and validate changes
5. Document new features and changes 